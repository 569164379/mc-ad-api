<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.tibco.com/schemas/mcapi_project/shareResources/schemas/Schema.xsd5" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx2="http://www.tibco.com/schemas/mc_project/share_resources/schema_resources/Schema.xsd2" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:import namespace="http://www.tibco.com/schemas/mcapi_project/shareResources/schemas/Schema.xsd5" schemaLocation="/shareResources/schemas/ConditionsSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/mc_project/share_resources/schema_resources/Schema.xsd2" schemaLocation="/shareResources/schemas/ProductPOSchema.xsd"/>
    <pd:name>offerMg/offerService/CamptureIconUrl.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType ref="pfx:requestParams"/>
    <pd:startX>150</pd:startX>
    <pd:startY>64</pd:startY>
    <pd:returnBindings>
        <responseJsonStr>
            <xsl:value-of select="$Render-JSON/ns:ActivityOutputClass/jsonString"/>
        </responseJsonStr>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="responseJsonStr" type="xsd:string"/>
    </pd:endType>
    <pd:endX>862</pd:endX>
    <pd:endY>96</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1499244640171</pd:targetNamespace>
    <pd:activity name="Parse JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>284</pd:x>
        <pd:y>137</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor ref="pfx2:productObj"/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Start/pfx:requestParams/pfx:jsonPostData"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Java Code">
        <pd:type>com.tibco.plugin.java.JavaActivity</pd:type>
        <pd:resourceType>ae.javapalette.javaActivity</pd:resourceType>
        <pd:x>481</pd:x>
        <pd:y>226</pd:y>
        <config>
            <fileName>CamptureIconUrlJavaCode</fileName>
            <packageName>offerMg.offerService.CamptureIconUrl</packageName>
            <fullsource>package offerMg.offerService.CamptureIconUrl;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class CamptureIconUrlJavaCode{
/****** START SET/GET METHOD, DO NOT MODIFY *****/
	protected String requestUrl = "";
	protected String srcUrl = "";
	public String getrequestUrl() {
		return requestUrl;
	}
	public void setrequestUrl(String val) {
		requestUrl = val;
	}
	public String getsrcUrl() {
		return srcUrl;
	}
	public void setsrcUrl(String val) {
		srcUrl = val;
	}
/****** END SET/GET METHOD, DO NOT MODIFY *****/
	public CamptureIconUrlJavaCode() {
	}
	public void invoke() throws Exception {
/* Available Variables: DO NOT MODIFY
	In  : String requestUrl
	Out : String srcUrl
* Available Variables: DO NOT MODIFY *****/
long startAll = System.currentTimeMillis();

	long start = System.currentTimeMillis();
	String htmlStr = getHtmlContents(requestUrl);
	long end = System.currentTimeMillis();
	
	System.out.println("capture the web html contents using time: "+(end-start)+" millisecond");
	//String regEx = "([\\s\\S]*&lt;div id=\"left-stack\"&gt;{1})([\\s\\S]*)(&lt;img[\\s\\S]*src=\"[\\s\\S]*\"[\\s\\S]*)(&lt;span class=\"mask\"&gt;[\\s|\\S]*){1}";
	//String regEx2 = "(&lt;img[\\s\\S]*src=\"){1}([\\s\\S]*)(\"\\s*/&gt;\\s*){1}";

long start2 = System.currentTimeMillis();
	String regEx = "([\\s\\S]*&lt;div id=\"left-stack\"&gt;{1})([\\s\\S]*)(&lt;img[\\s\\S]*src=\"[\\s\\S]*\"[\\s\\S]*)(&lt;meta[\\s\\S]*&lt;/meta&gt;){1}([\\s]*)(&lt;span class=\"mask\"&gt;[\\s|\\S]*){1}";
		//String regEx2 = "(&lt;img[\\s\\S]*src=\"){1}([\\s\\S]*)(\"\\s*/&gt;[\\s\\S]*){1}";
		String regEx2 = "(&lt;img[\\s\\S]*src-swap=\"){1}([\\s\\S]*)(\"{1}\\s*class=\"artwork\"[\\s\\S]*){1}";
	srcUrl = getTargetString(htmlStr, regEx, regEx2, 3, 2);
	
	long end2 = System.currentTimeMillis();

	long endAll = System.currentTimeMillis();
	
	System.out.println("capture the image url using time: "+(end2-start2)+" millisecond");

	System.out.println("capture the image url using total  time: "+(endAll-startAll)+" millisecond");
}
public String getHtmlContents(String requestUrl){
		BufferedReader bufferedReader = null;
		InputStreamReader inputStreamReader = null;
		HttpURLConnection httpUrlConn = null;
		InputStream inputStream = null;
		
		StringBuffer sb = new StringBuffer();
		try {
			URL url = new URL(requestUrl);
			httpUrlConn = (HttpURLConnection) url.openConnection();
			httpUrlConn.setDoInput(true);  
			httpUrlConn.setRequestMethod("GET"); 
			
			inputStream = httpUrlConn.getInputStream();
			inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
			bufferedReader = new BufferedReader(inputStreamReader);
			
			String str = null;
			
			while((str=bufferedReader.readLine()) !=null ){
				sb.append(str);
			}
			 
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(bufferedReader!=null){
				try {
					bufferedReader.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			if(inputStreamReader != null){
				try {
					inputStreamReader.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			if(inputStream != null){
				try {
					inputStream.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			if(httpUrlConn!=null){
				httpUrlConn.disconnect();
			}
		}
			return sb.toString();
	}
	
	public String getTargetString(String htmlStr, String regEx, String regEx2,int j, int k){
		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(htmlStr);
		
		String srcUrl="";
		if(m.matches()){
			String s3 = m.group(j);
			//System.out.println("s3 :"+s3);
			
			Pattern p2 = Pattern.compile(regEx2);
			Matcher m2 = p2.matcher(s3);
			if(m2.matches()){
				srcUrl = m2.group(k);
			}
		}
		return srcUrl;
	}
}
</fullsource>
            <inputData>
                <row>
                    <fieldName>requestUrl</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </inputData>
            <outputData>
                <row>
                    <fieldName>srcUrl</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </outputData>
            <byteCode>
                <class>
                    <name>CamptureIconUrlJavaCode</name>
                    <byteCode>yv66vgAAADQAswkAMwBZCQAzAFoKADQAWwgAXAoAXQBeCgAzAF8JAF0AYAcAYQoACABbCABiCgAIAGMKAAgAZAgAZQoACABmCgBnAGgIAGkIAGoKADMAawgAbAgAbQcAbgoAFQBbBwBvCgAXAHAKABcAcQcAcgoAGgBzCAB0CgAaAHUKABoAdgcAdwgAeAoAHwB5BwB6CgAiAHsKACIAfAoAFQB9CgAiAH4HAH8KACcAgAoAHwB+CgCBAH4KABoAggcAgwoALACACgAVAGYKAIQAhQoAhACGCgCHAIgKAIcAiQcAigcAiwEACnJlcXVlc3RVcmwBABJMamF2YS9sYW5nL1N0cmluZzsBAAZzcmNVcmwBAA1nZXRyZXF1ZXN0VXJsAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANc2V0cmVxdWVzdFVybAEAFShMamF2YS9sYW5nL1N0cmluZzspVgEACWdldHNyY1VybAEACXNldHNyY1VybAEABjxpbml0PgEAAygpVgEABmludm9rZQEACkV4Y2VwdGlvbnMHAIwBAA9nZXRIdG1sQ29udGVudHMBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEADVN0YWNrTWFwVGFibGUHAIoHAI0HAHoHAHcHAHIHAI4HAG4HAG8HAH8HAIMHAI8BAA9nZXRUYXJnZXRTdHJpbmcBAEwoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7SUkpTGphdmEvbGFuZy9TdHJpbmc7BwCQBwCRAQAKU291cmNlRmlsZQEAHENhbXB0dXJlSWNvblVybEphdmFDb2RlLmphdmEMADUANgwANwA2DABAAEEBAAAHAJIMAJMAlAwARQBGDACVAJYBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAKmNhcHR1cmUgdGhlIHdlYiBodG1sIGNvbnRlbnRzIHVzaW5nIHRpbWU6IAwAlwCYDACXAJkBAAwgbWlsbGlzZWNvbmQMAJoAOQcAmwwAnAA9AQCKKFtcc1xTXSo8ZGl2IGlkPSJsZWZ0LXN0YWNrIj57MX0pKFtcc1xTXSopKDxpbWdbXHNcU10qc3JjPSJbXHNcU10qIltcc1xTXSopKDxtZXRhW1xzXFNdKjwvbWV0YT4pezF9KFtcc10qKSg8c3BhbiBjbGFzcz0ibWFzayI+W1xzfFxTXSopezF9AQBFKDxpbWdbXHNcU10qc3JjLXN3YXA9Iil7MX0oW1xzXFNdKikoInsxfVxzKmNsYXNzPSJhcnR3b3JrIltcc1xTXSopezF9DABTAFQBACJjYXB0dXJlIHRoZSBpbWFnZSB1cmwgdXNpbmcgdGltZTogAQApY2FwdHVyZSB0aGUgaW1hZ2UgdXJsIHVzaW5nIHRvdGFsICB0aW1lOiABABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAMamF2YS9uZXQvVVJMDABAAD0MAJ0AngEAGmphdmEvbmV0L0h0dHBVUkxDb25uZWN0aW9uDACfAKABAANHRVQMAKEAPQwAogCjAQAZamF2YS9pby9JbnB1dFN0cmVhbVJlYWRlcgEABVVURi04DABAAKQBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyDABAAKUMAKYAOQwAlwCnDACoAEEBABNqYXZhL2lvL0lPRXhjZXB0aW9uDACpAEEHAI4MAKoAQQEAHmphdmEvbmV0L01hbGZvcm1lZFVSTEV4Y2VwdGlvbgcAkAwAqwCsDACtAK4HAJEMAK8AsAwAsQCyAQA8b2ZmZXJNZy9vZmZlclNlcnZpY2UvQ2FtcHR1cmVJY29uVXJsL0NhbXB0dXJlSWNvblVybEphdmFDb2RlAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvbGFuZy9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9pby9JbnB1dFN0cmVhbQEAE2phdmEvbGFuZy9UaHJvd2FibGUBABdqYXZhL3V0aWwvcmVnZXgvUGF0dGVybgEAF2phdmEvdXRpbC9yZWdleC9NYXRjaGVyAQAQamF2YS9sYW5nL1N5c3RlbQEAEWN1cnJlbnRUaW1lTWlsbGlzAQADKClKAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAcKEopTGphdmEvbGFuZy9TdHJpbmdCdWls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</byteCode>
                </class>
            </byteCode>
        </config>
        <pd:inputBindings>
            <javaCodeActivityInput>
                <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/pfx2:productObj/pfx2:productLp">
                    <requestUrl>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/pfx2:productObj/pfx2:productLp"/>
                    </requestUrl>
                </xsl:if>
            </javaCodeActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Render JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>729</pd:x>
        <pd:y>191</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityInputEditor ref="pfx2:productObj"/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <pfx2:productObj>
                    <xsl:if test="$Java-Code/javaCodeActivityOutput/srcUrl">
                        <pfx2:productIconUrl>
                            <xsl:value-of select="$Java-Code/javaCodeActivityOutput/srcUrl"/>
                        </pfx2:productIconUrl>
                    </xsl:if>
                </pfx2:productObj>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Java Code</pd:from>
        <pd:to>Render JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Java Code</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>